/**
 * CrowdLabelAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Availability from '../model/Availability';
import Credentials from '../model/Credentials';
import HTTPValidationError from '../model/HTTPValidationError';
import HelloRequest from '../model/HelloRequest';
import HelloResponse from '../model/HelloResponse';
import JWT from '../model/JWT';
import Registration from '../model/Registration';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the availabilityAvailabilityPost operation.
     * @callback module:api/DefaultApi~availabilityAvailabilityPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Availability} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Availability
     * @param {module:model/Availability} availability 
     * @param {module:api/DefaultApi~availabilityAvailabilityPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Availability}
     */
    availabilityAvailabilityPost(availability, callback) {
      let postBody = availability;
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling availabilityAvailabilityPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Availability;
      return this.apiClient.callApi(
        '/availability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadResultsDownloadResultsGet operation.
     * @callback module:api/DefaultApi~downloadResultsDownloadResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Results
     * @param {module:api/DefaultApi~downloadResultsDownloadResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    downloadResultsDownloadResultsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/download_results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faviconFaviconIcoGet operation.
     * @callback module:api/DefaultApi~faviconFaviconIcoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favicon
     * @param {module:api/DefaultApi~faviconFaviconIcoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    faviconFaviconIcoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/favicon.ico', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPagePageGet operation.
     * @callback module:api/DefaultApi~getPagePageGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Page
     * @param {String} page 
     * @param {module:api/DefaultApi~getPagePageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getPagePageGet(page, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getPagePageGet");
      }

      let pathParams = {
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the helloHelloPost operation.
     * @callback module:api/DefaultApi~helloHelloPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelloResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hello
     * @param {module:model/HelloRequest} helloRequest 
     * @param {module:api/DefaultApi~helloHelloPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelloResponse}
     */
    helloHelloPost(helloRequest, callback) {
      let postBody = helloRequest;
      // verify the required parameter 'helloRequest' is set
      if (helloRequest === undefined || helloRequest === null) {
        throw new Error("Missing the required parameter 'helloRequest' when calling helloHelloPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HelloResponse;
      return this.apiClient.callApi(
        '/hello', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexGet operation.
     * @callback module:api/DefaultApi~indexGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Index
     * @param {module:api/DefaultApi~indexGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    indexGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginLoginPost operation.
     * @callback module:api/DefaultApi~loginLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JWT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * Successful login. Returns the `jwt` associated with the provided credentials.
     * @param {module:model/Credentials} credentials 
     * @param {module:api/DefaultApi~loginLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWT}
     */
    loginLoginPost(credentials, callback) {
      let postBody = credentials;
      // verify the required parameter 'credentials' is set
      if (credentials === undefined || credentials === null) {
        throw new Error("Missing the required parameter 'credentials' when calling loginLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JWT;
      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readItemsItemsGet operation.
     * @callback module:api/DefaultApi~readItemsItemsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Items
     * @param {module:api/DefaultApi~readItemsItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    readItemsItemsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/items/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readUsersMeUsersMeGet operation.
     * @callback module:api/DefaultApi~readUsersMeUsersMeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Users Me
     * @param {module:api/DefaultApi~readUsersMeUsersMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    readUsersMeUsersMeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerRegisterPost operation.
     * @callback module:api/DefaultApi~registerRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JWT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register
     * Successful registration. Returns the `jwt` associated with the newly-created account
     * @param {module:model/Registration} registration 
     * @param {module:api/DefaultApi~registerRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWT}
     */
    registerRegisterPost(registration, callback) {
      let postBody = registration;
      // verify the required parameter 'registration' is set
      if (registration === undefined || registration === null) {
        throw new Error("Missing the required parameter 'registration' when calling registerRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JWT;
      return this.apiClient.callApi(
        '/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadTaskUploadTaskPost operation.
     * @callback module:api/DefaultApi~uploadTaskUploadTaskPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Task
     * @param {String} data 
     * @param {File} inFile 
     * @param {module:api/DefaultApi~uploadTaskUploadTaskPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    uploadTaskUploadTaskPost(data, inFile, callback) {
      let postBody = null;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling uploadTaskUploadTaskPost");
      }
      // verify the required parameter 'inFile' is set
      if (inFile === undefined || inFile === null) {
        throw new Error("Missing the required parameter 'inFile' when calling uploadTaskUploadTaskPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'data': data
      };
      let headerParams = {
      };
      let formParams = {
        'in_file': inFile
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/upload_task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wrappertaskTaskIdGet operation.
     * @callback module:api/DefaultApi~wrappertaskTaskIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wrappertask
     * @param {Object} args 
     * @param {Object} kwargs 
     * @param {module:api/DefaultApi~wrappertaskTaskIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    wrappertaskTaskIdGet(args, kwargs, callback) {
      let postBody = null;
      // verify the required parameter 'args' is set
      if (args === undefined || args === null) {
        throw new Error("Missing the required parameter 'args' when calling wrappertaskTaskIdGet");
      }
      // verify the required parameter 'kwargs' is set
      if (kwargs === undefined || kwargs === null) {
        throw new Error("Missing the required parameter 'kwargs' when calling wrappertaskTaskIdGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'args': args,
        'kwargs': kwargs
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/task/<id>', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wrappertasksTasksGet operation.
     * @callback module:api/DefaultApi~wrappertasksTasksGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wrappertasks
     * @param {Object} args 
     * @param {Object} kwargs 
     * @param {module:api/DefaultApi~wrappertasksTasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    wrappertasksTasksGet(args, kwargs, callback) {
      let postBody = null;
      // verify the required parameter 'args' is set
      if (args === undefined || args === null) {
        throw new Error("Missing the required parameter 'args' when calling wrappertasksTasksGet");
      }
      // verify the required parameter 'kwargs' is set
      if (kwargs === undefined || kwargs === null) {
        throw new Error("Missing the required parameter 'kwargs' when calling wrappertasksTasksGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'args': args,
        'kwargs': kwargs
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wrapperuserUserUsernameGet operation.
     * @callback module:api/DefaultApi~wrapperuserUserUsernameGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wrapperuser
     * @param {Object} args 
     * @param {Object} kwargs 
     * @param {module:api/DefaultApi~wrapperuserUserUsernameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    wrapperuserUserUsernameGet(args, kwargs, callback) {
      let postBody = null;
      // verify the required parameter 'args' is set
      if (args === undefined || args === null) {
        throw new Error("Missing the required parameter 'args' when calling wrapperuserUserUsernameGet");
      }
      // verify the required parameter 'kwargs' is set
      if (kwargs === undefined || kwargs === null) {
        throw new Error("Missing the required parameter 'kwargs' when calling wrapperuserUserUsernameGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'args': args,
        'kwargs': kwargs
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/<username>', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
